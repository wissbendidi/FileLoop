[project]
name = "fileloop"
version = "0.1.0"
description = "AI-Powered Local File Cleaner - Privacy-focused file organization tool"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "FileLoop Team", email = "team@fileloop.dev"},
]
keywords = ["file-management", "ai", "privacy", "local", "organization", "cleanup"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Desktop Environment :: File Managers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "plotly>=5.15.0",
    "pypdf2>=3.0.1",
    "python-docx>=0.8.11",
    "scikit-learn>=1.3.0",
    "sentence-transformers>=2.2.2",
    "streamlit>=1.25.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
package = true

[project.scripts]
fileloop = "src.ui:main"

[project.urls]
Homepage = "https://github.com/fileloop/fileloop"
Documentation = "https://github.com/fileloop/fileloop#readme"
Repository = "https://github.com/fileloop/fileloop"
Issues = "https://github.com/fileloop/fileloop/issues"

[dependency-groups]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
